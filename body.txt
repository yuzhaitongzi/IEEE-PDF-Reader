1538 IEEE TRANSACTIONS ON CYBERNETICS, VOL. 46, NO. 7, JULY 2016
Dynamic Neural Networks for Kinematic
Redundancy Resolution of Parallel
Stewart Platforms
Aquil Mirza Mohammed and Shuai Li, Member, IEEE
Abstract —Redundancy resolution is a critical problem in the
control of parallel Stewart platform. The redundancy endowsus with extra design degree to improve system performance.In this paper, the kinematic control problem of Stewart plat-forms is formulated to a constrained quadratic programming.The Karush–Kuhn–Tucker conditions of the problem is obtainedby considering the problem in its dual space, and then a dynamicneural network is designed to solve the optimization problemrecurrently. Theoretical analysis reveals the global convergenceof the employed dynamic neural network to the optimal solu-tion in terms of the deﬁned criteria. Simulation results verify theeffectiveness in the tracking control of the Stewart platform fordynamic motions.
Index Terms —Constrained quadratic programming, kinematic
redundancy, recurrent neural networks, Stewart platform.
I. I NTRODUCTION
KINEMATICALLY redundant manipulators are referred
to those which have more degrees-of-freedom (DOFs)
than required to determine the position and orientation. Theredundancy of parallel manipulators can be utilized to over-
come the obstacles, singularities , increasing workspace,
improving dexterity and to optimize the performance and toachieve a smooth end-effector motion task . As redundant
robots have more DOF than required, there usually exist mul-
tiple solutions for kinematic control, which motivates us for
the consideration of exploiting the extra DOFs to improve the
control performance.
The inverse kinematics problem is one of the fundamental
tasks in understanding the operability of parallel manipula-
tors, i.e., to ﬁnd the actuator inputs, provided the desiredend-effector trajectories. Conventional design of the parallel
mechanisms often encounter singularity problem. The design
of redundancy in parallel mechanism often provides a effec-tive remedy. Liu et al.  proposed a new 3-DOF symmetric
spherical 3-universal, prismatic, and spherical joints/S paral-
lel mechanism with three prismatic actuators, and studied the
Manuscript received November 11, 2014; revised March 24, 2015 and
May 16, 2015; accepted June 26, 2015. Date of publication July 24, 2015;date of current version June 14, 2016. This work was supported in part by
the NSFC under Grant 61401385 and in part by Hong Kong RGC ECS under
Grant 25214015. This paper was recommended by Associate Editor Y . Xia.(Corresponding author: Shuai Li.)
The authors are with Department Computing, Hong Kong Polytechnic
University, Hong Kong 07030 (e-mail: csmaquil@comp.polyu.edu.hk ;
shuaili@polyu.edu.hk ).
Color versions of one or more of the ﬁgures in this paper are available
online at http://ieeexplore .ieee.org.
Digital Object Identiﬁer 10.1109/TCYB.2015.2451213kinematics, statics, and workspace of the mechanism. In , a
2(spherical prismatic and prismatic joints +spherical prismatic,
prismatic, and revolute joints +spherical prismatic, prismatic,
and universal joints) serial-parallel manipulators was consid-
ered. Based on the analysis, they designed three new types
of kinematically redundant parallel mechanisms, including anew redundant 7-DOF Stewart platform. In , the damped
least square method was utilized to tackle singularity prob-
lem. However, it only modiﬁes the end-effector path in termsof velocity. It was shown in  that it is important to analyze
the inverse dynamic of parallel manipulators to ﬁnd the joint
friction and actuator dynamics.
Soft computing techniques, including neural net-
works –, fuzzy logic , , and genetic
algorithm ,  have been extensive used for sci-
entiﬁc computation, robotic control, and modeling. Due to the
outstanding performance in parallel processing and recursivecomputation, dynamic neural networks, as a special type of
neural networks, have long been employed as a powerful tool
for the control of conventional serial robot arms. In ,
an adaptive recurrent neural network was employed for the
control of a mobile manipulator with unknown dynamics. It
was shown that the control strategy guarantees the asymp-totical convergence to the desired motion. In , a uniﬁed
quadratic-programming-based dynamical system approach
was proposed to optimize the joint torque of serial manipula-tors. A minimum-energy redundancy resolution methodology
was proposed in  for the recurrent neural networks
control of serial manipulators. Periodic oscillations of the
various neural networks were reported in this paper. In order
to reduce the network complexity and further increase thecomputational efﬁciency, Xia and Jun  introduced a single
layered dual neural network for the control of kinematically
redundant manipulators. In  and , the recurrent neural
network approach was extended to solve the cooperation of
multiple manipulators organized in a distributed network.
Theoretical investigation of new types of neural models,
and the applications of them to various real-world problems
also experienced intensive research attention in past years.
A simpliﬁed dual neural network architecture was proposedin  to reduce the structural complexity of conventional dual
neural networks. In , dissipativity and stability properties
were theoretically analyzed for a new type of memristor-basedrecurrent neural networks with time-varying delays. The syn-
chronization of coupled neural networks in the presence of
2168-2267 c/circlecopyrt2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.
Seehttp://www.ieee.org/publications_standards/publications/rights/index.html for more information.delayed feedback was discussed in . A complete review on
stability analysis of various continuous-time recurrent neuralnetworks was presented in . The generalization of real-
valued recurrent neural networks to complex-valued neural
dynamical approach was made in . This approach signiﬁ-
cantly reduces redundant computation in a double real-valued
space and features a low model complexity and storage
capacity. In , the problem of blind data fusion was
explored using a novel L
2norm estimation method. Like
most recent work on recurrent neural networks, this method
also relies on an continuous dynamic model with a piece-wise linear function as the activation function. A discrete-time
recurrent neural network was proposed in  to solve con-
strained optimization problems with the presence of L
1norm
in the objective function, and was successfully applied to
image restoration.
In spite of the great success of dynamic neural networks
in both theory and application, there is rare report on using
dynamic neural network to address the kinematic resolu-tion problem of Stewart platform. In this paper, we make
progress along this direction. The problem is formulated
to a constrained quadratic programming in this paper. TheKarush–Kuhn–Tucker (KKT) conditions of the problem is
obtained by considering the problem in its dual space, and
then we design a dynamic neural network to solve this prob-lem recurrently. Due to the formulation of the problem from
an optimization perspective, optimality in movement can be
directly reached. Actually, for the Stewart platform, its for-ward kinematics are highly nonlinear and heavily coupled,
which impose great challenges to the neural dynamic design to
reach the same control goal. Additionally, due to the modeling
of constraints as inequalities in the optimization problem, the
obtained solution is direct in compliance with the physicalconstraints. Using convergence theories on projected neu-
ral networks, the global convergence of this dynamic neural
network to the optimal solution is also proved rigorously.Simulation results veriﬁes the effectiveness in the tracking
control of the Stewart platform for dynamic motions. The con-
tributions of this paper are threefold: ﬁrst, to the best of ourknowledge, this is the ﬁrst attempt of using dynamic neu-
ral networks for kinematic redundancy resolution of parallel
Stewart platforms. Second, in this paper, both minimizationof the energy consumption and feasibility of physical con-
straints are taken into account. Accordingly, the obtained
solution is both optimal and feasible. This is in contrast toother control methodology, which usually cannot guarantee
the control action is within a feasible set. Third, different
from feed-forward neural network, which usually suffer fromlocal optimality, the dynamic neural approach employed in this
paper is globally optimal.
The remainder of this paper is organized into eight sections.
Section II describes the preliminaries of the Stewart plat-
form. Section III provides the background information on therobotic kinematics of the constrained manipulators. Section IV
describes the problem formulation as constrained optimiza-
tion for the physically constrained manipulators. Section Vprovides a dynamic neural network model for the kinematic
II. P
RELIMINARIES
The pose (position and orientation) of a rigid body in 3-D
space is uniquely determined by a translation, represented by
a 3-D vector, and a rotation, represented by a 3 ×3 rotational
matrix in terms of three Euler angles. The rotational matrix
/Omega1∈R3×3deﬁned by the Euler angles T∈R3has
the following property for its time derivative:
˙/Omega1/Omega1T=⎡
⎣0−˙φz˙φy
˙φz 0−˙φx
−˙φy˙φx 0⎤
⎦. (1)
This property holds for all rotational matrices. Additionally,
the rotational matrix is orthogonal, i.e., /Omega1/Omega1T=I,/Omega1−1=/Omega1T
with Idenoting a 3 ×3 identity matrix.
For two vectors u=T∈ R3and v=
T∈ R3, their cross-product, denoted as “ ×,” is
deﬁned as
⎡
⎣u1
u2
u3⎤
⎦×⎡
⎣v1
v2
v3⎤
⎦=⎡
⎣u2v3−u3v2
u3v1−u1v3
u1v2−u2v1⎤
⎦. (2)
The triple product of three vectors in 3-D space is
deﬁned based on the cross product. For three vectors u=
T∈ R3,v=T∈ R3, and w=
T∈R3, their triple product is deﬁned as (u×v)Tw,
and equals the following in value:
(u×v)Tw=det⎡
⎣uT
vT
wT⎤
⎦. (3)
The triple product is invariant under circular shifting
(u×v)Tw=(v×w)Tu=(w×u)Tv. (4)
The matrix on the right-hand side in ( 1)i sa3 ×3s k e w -
symmetric matrix. For a general 3 ×3 skew-symmetric matrix,
as can be simply veriﬁed, always holds for any x,y,z∈R,
α=T∈R3
⎡
⎣0−zy
z 0−x
−yx 0⎤
⎦α=⎡
⎣x
y
z⎤
⎦×α. (5)
Due to the above relation, it is common to use T
×to
represent a 3-D skew-symmetric matrix as
⎡
⎣0−zy
z 0−x
−yx 0⎤
⎦α=⎡
⎣x
y
z⎤
⎦
×. (6)
III. R OBOT KINEMATICS
The Stewart platform is a typical parallel mechanism and
can be extended to different forms by modifying its mecha-
nisms. It includes a mobile platform on the top as shown inFig. 1. Schematic of the Stewart platform.
Fig. 1, a ﬁxed base, and six independent driving legs connect-
ing the aforementioned two parts. The two ends of each leg are
ﬁxed on the mobile platform and the ﬁxed based, respectively,
using universal joints. Each leg can be actuated to changeits length for the adjustment of the distance between the two
ﬁxed points on the platform and the base. All together, the six
legs collaborates to adjust the orientation and position of themobile platform by changing their lengths.
A. Geometric Relation
For the Stewart platform, the global coordinate is ﬁxed on
the base and the platform coordinate is ﬁxed on the mobile
platform. a
i∈R3fori=1,2,..., 6 represents the position
in global coordinates of the ith connection point on the base.
b/prime
i∈R3fori=1,2,..., 6 represents the position in platform
coordinates of the ith connection point on the platform. We use
bito represents its position in the global coordinate, as shown
in Fig. 1.di=bi−aifori=1,2,..., 6 represents the vector
corresponding to the ith leg, which points from the base to
the platform. For a point x/prime∈R3in the platform coordinate,
its position x∈R3in global coordinate is obtained after a
rotational and translational transformation
x=p+Qx/prime(7)
where p=T∈R3is the global coordinate of the
zero position in the platform coordinate, and it correspondsto the translational transformation, Q∈ R
3×3is the rota-
tional matrix, which is uniquely deﬁned by the Euler angles
θ=T∈R3
Q=QzQyQx
Qx=⎡
⎣10 0
0 cos θx sinθx
0−sinθxcosθx⎤
⎦
Qy=⎡
⎣cosθy0−sinθy
01 0
sinθy0 cos θy⎤
⎦
Qz=⎡
⎣cosθz sinθz0
−sinθycosθy0
00 1⎤
⎦. (8)
Following ( 7), as to the ith connection point on the platform,
i.e., the ones with x=biin the global coordinates or the ones
with x/prime=b/prime
iin the platform coordinates, we have:
bi=p+Qb/prime
i.
di=bi−ai=p+Qb/prime
i−ai. (10)
For the vector di, we deﬁne ri=/bardbldi/bardblto represent its length.
Accordingly, we have
ri=/vextenddouble/vextenddoublep+Qb/prime
i−ai/vextenddouble/vextenddouble. (11)
Notice that both aiandbiare constants and are determined
by the geometric structure. p=Tdeﬁnes the trans-
lation of the platform, and Qas a function of the Euler angles
θ=T, deﬁnes the rotation of the platform. Overall,
the right-hand side of ( 11) depends on the pose variables of
the platform π=T∈R6while the left-
hand side of ( 11) is the length of the leg, which is controlled
for actuation. In this sense, ( 11)f o r i=1,2,..., 6 deﬁnes the
kinematic relation between the actuation variables and the pose
variables. For a six-dimensional reference pose, the desired leg
length rican be directly obtained from ( 11). However, in real
applications, the reference are usually not six-dimensional. Forexample, for surgical applications of Stewart platform, peo-
ple may only care about the position of an end-effector on
the platform, instead of its orientation. In this situation, thereference is 3-D and we have three additional DOF as redun-
dancy. For such a situation, we usually have inﬁnite number
of feasible solutions of r
ifori=1,2,..., 6 to reach the
reference. Among the feasible solutions, we may be able to
identify one, which outperforms others in terms of certain opti-
mization criteria. This intuitive analysis motivate us to modelit as an optimization problem and identify the optimal one
for improved performance. However, due to the nonlinear-
ity of ( 11), direct treatment of ( 11) is technically prohibitive.
Instead of direct solution in position space, we turn to solve
the problem in its velocity space to exploit the approximate
linearity.
B. Velocity Space Resolution
For easy treatment, ( 11) is rewritten as
r
2
i=/parenleftbig
p+Qb/prime
i−ai/parenrightbigT/parenleftbig
p+Qb/prime
i−ai/parenrightbig
. (12)
To obtain the velocity space relations, we ﬁrst compute time
derivative on both sides of ( 12), which yields
ri˙ri=/parenleftbig
p+Qb/prime
i−ai/parenrightbigT/parenleftbig
˙p+˙Qb/prime
i+Q˙b/prime
i−˙ai/parenrightbig
=/parenleftbig
p+Qb/prime
i−ai/parenrightbigT/parenleftbig
˙p+˙Qb/prime
i/parenrightbig
. (13)
Recall that both aiandb/prime
iare constants and their time deriva-
tives, ˙aiand˙b/prime
i, equal to zero. For the rotational matrix Q,
according to the preliminary equations ( 1) and ( 6), it has the
following property for its time derivative:
˙QQT=⎡
⎣0−˙θz˙θy
˙θz 0−˙θx
−˙θy˙θx 0⎤
⎦=⎡
⎣˙θx
˙θy
˙θz⎤
⎦
×=˙θ×.(14)
Therefore, ˙Qwrites as follows:
˙Q=˙θ×/parenleftbig
QT/parenrightbig−1=˙θ×Q. (15)
ri˙ri=/parenleftbig
p+Qb/prime
i−ai/parenrightbigT/parenleftbig
˙p+˙θ×Qb/prime
i/parenrightbig
=dT
i/parenleftbig
˙p+˙θ×Qb/prime
i/parenrightbig
=dT
i˙p+/parenleftbig/parenleftbig˙θ×/parenleftbig
Qb/prime
i/parenrightbig/parenrightbigTdi
=dT
i˙p+/parenleftbig/parenleftbig
Qb/prime
i/parenrightbig
×di/parenrightbigT˙θ
=/bracketleftBig
dT
i/parenleftbig/parenleftbig
Qb/prime
i/parenrightbig
×di/parenrightbigT/bracketrightBig/bracketleftbigg˙p
˙θ/bracketrightbigg
. (16)
In the above equation, ( 10) and ( 4) are used for the deriva-
tion in the second line and the derivation in the second last
line, respectively. Noticing that ri=/bardbldi/bardbl>0 could be guar-
anteed by the mechanical structure, we have the following
result:
˙ri=1
ri/bracketleftBig
dT
i/parenleftbig/parenleftbig
Qb/prime
i/parenrightbig
×di/parenrightbigT/bracketrightBig/bracketleftbigg˙p
˙θ/bracketrightbigg
=1
ri/bracketleftBig
dT
i/parenleftbig/parenleftbig
Qb/prime
i/parenrightbig
×di/parenrightbigT/bracketrightBig
˙π. (17)
For the six-dimensional vector r=T,w eh a v e
the compact matrix form as follows:
˙r=A1˙π (18)
where
A1=⎡
⎢⎢⎢⎣1
r1dT
11
r1/parenleftbig/parenleftbig
Qb/prime
1/parenrightbig
×d1/parenrightbigT
1
r2dT
21
r2/parenleftbig/parenleftbig
Qb/prime
2/parenrightbig
×d2/parenrightbigT
··· ···
1
r6dT
61
r6/parenleftbig/parenleftbig
Qb/prime
6/parenrightbig
×d6/parenrightbigT⎤
⎥⎥⎥⎦
=⎡
⎢⎢⎢⎣1
r1/parenleftbig
p+Qb/prime
1−a1/parenrightbigT 1
r1/parenleftbig/parenleftbig
Qb/prime
1/parenrightbig
×(p−a1)/parenrightbigT
1
r2/parenleftbig
p+Qb/prime
2−a2/parenrightbigT 1
r2/parenleftbig/parenleftbig
Qb/prime
2/parenrightbig
×(p−a2)/parenrightbigT
··· ···
1
r6/parenleftbig
p+Qb/prime
6−a6/parenrightbigT 1
r6/parenleftbig/parenleftbig
Qb/prime
6/parenrightbig
×(p−a6)/parenrightbigT⎤
⎥⎥⎥⎦.
(19)
Equation ( 18) gives the kinematic relation of a six-DOF
Stewart platform from the velocity of the pose variables to
the speed of the legs.
IV . PROBLEM FORMULATION AS
CONSTRAINED OPTIMIZATION
Compared to ( 11) and ( 18) signiﬁcantly simpliﬁes the prob-
lem as ˙rin (18) is now afﬁne to the ˙πwhile the relation
between riandπ(orpandQ)i n( 11) are nonlinear, or even
nonconvex to the pose variables. Similar to our analysis before,
in the case that the reference pose velocity is given in six
dimensions, the solution of ˙rcan be solved directly from ( 18).
However, in the situation that the reference pose velocity isdescribed in lower dimensions that six, the extra redundancies
are available to reach improved performance. The following
equality model the reference velocity constraint in reduceddimensions:
α=A
2˙π6i sp r e -
given, the matrix A2∈Rm×6is the transformation matrix and
is also pregiven. As an example, if we would like to maintain
the platform at a given height, i.e., ˙pz=0, we set α=0 with
m=1 and A2=Tin (20) .D u et ot h ee x t r a
design freedom, the value of ˙πusually cannot be uniquely
solved from ( 20). We thus deﬁne the following criteria to
optimize the solution:
min(˙π,τ)1
2˙πT/Lambda11˙π+1
2τT/Lambda12τ (21)
where /Lambda11∈R6×6and/Lambda12∈R6×6are both symmetric con-
stant matrices and are both positive deﬁnite, τ=˙ris the
controllable speed of the platform legs. In application, the term
˙πT/Lambda11˙πcan be used to specify the kinematic energy (includ-
ing translational kinetic energy and rotational kinetic energy)
by choosing proper weighting matrix /Lambda11(say choosing /Lambda11as
one formed from the mass of the platform and its moment of
inertia for the kinematic energy case), and the term τT/Lambda12τ
characters the input power consumed by the robotic system.This objective function also follows the convention of control
theory . The decision variable τ, which is controlled by
the actuators, is subjected to physical constraints. In this paper,we model the physical constraints as linear inequalities in the
following form:
Bτ≤b (22)
where B∈R
k×6andb∈Rkwith kbeing an integer. Note that
constraints are not imposed to the variable ˙πsince its value
usually is speciﬁed as a feasible one in the planning stage.
In summary of ( 21) as the object function, ( 18) as the map-
ping relation, ( 20) to fulﬁl the reference tracking requirements,
and ( 22) as physical constraints, we can formulate the kine-
matic control problem of the Stewart platform as the following
constrained programming:
min(˙π,τ)1
2˙πT/Lambda11˙π+1
2τT/Lambda12τ (23a)
s.t.τ=A1˙π (23b)
α=A2˙π (23c)
Bτ≤b. (23d)
Due to the presence of both equation and inequality con-
straints in the optimization problem ( 23), usually it cannot
be solved analytically. Conventional approaches introduces
extra penalty terms formed by the constraints to the objec-
tive function and solve the problem numerically using gradient
descent along the new objective function. However, penalty-based approaches only reaches an approximate solution of the
problem and thus are not suitable for error-sensitive appli-
cations. Instead of using this approximate approach, in thenext section, we will propose a dynamic neural network
solution, which asymptotically converges to the theoretical
solution.
V. D
YNAMIC NEURAL NETWORK MODEL
In this section, we ﬁrst consider the optimization prob-
lem ( 23) in its dual space and then present a neural network tosolve it dynamically. After that, we investigate the hardware
realization of the proposed model.
A. Neural Network Design
According to the KKT conditions , the solution of
problem ( 23) satisﬁes
/Lambda11˙π−AT
1λ1−AT
2λ2=0 (24a)
/Lambda12τ+λ1+BTμ=0 (24b)
τ=A1˙π (24c)
α=A2˙π (24d)/braceleftBigg
μ> 0i f Bτ=b
μ=0i f Bτ< b(24e)
where λ1∈ R6,λ2∈ Rm(mis the number of rows in
matrix A2), and μ∈R6are dual variables to the equation
constraint ( 23b), the equation constraint ( 23c) and the inequal-
ity constraint ( 23d), respectively. The expression ( 24e) can be
simpliﬁed to
μ=(μ+Bτ−b)+(25)
where the nonlinear mapping “ (·)+” is a function which maps
negative values to zero and non-negative values to themselves.From ( 24a),˙πcan be solved as
˙π=/Lambda1
−1
1/parenleftbig
AT
1λ1+AT
2λ2/parenrightbig
. (26)
Substituting ˙πin (26)t o( 24c) and ( 24d) yields
τ=A1/Lambda1−1
1/parenleftbig
AT
1λ1+AT
2λ2/parenrightbig
(27)
α=A2/Lambda1−1
1/parenleftbig
AT
1λ1+AT
2λ2/parenrightbig
. (28)
To eliminate τ, we ﬁrst represent it in terms of λ1andμ
according to ( 24b)a s
τ=−/Lambda1−1
2/parenleftbig
λ1+BTμ/parenrightbig
(29)
then substitute ( 29)i n t o( 24c) and ( 27), which results in
−/Lambda1−1
2/parenleftbig
λ1+BTμ/parenrightbig
=A1/Lambda1−1
1/parenleftbig
AT
1λ1+AT
2λ2/parenrightbig
(30)
μ=/parenleftBig
μ−B/Lambda1−1
2λ1−B/Lambda1−1
2BTμ−b/parenrightBig+
. (31)
We use the following dynamics for the solutions of λ1,λ2,
andμin (28), (30), and ( 31):
/epsilon1˙λ1=−/Lambda1−1
2/parenleftbig
λ1+BTμ/parenrightbig
−A1/Lambda1−1
1/parenleftbig
AT
1λ1+AT
2λ2/parenrightbig
/epsilon1˙λ2=−A2/Lambda1−1AT
1λ1−A2/Lambda1−1AT
2λ2+α
/epsilon1˙μ=−μ+/parenleftBig
μ−B/Lambda1−1
2λ1−B/Lambda1−1
2BTμ−b/parenrightBig+
(32)
where /epsilon1>0 is a scaling factor. Overall, the proposed dynamic
neural network has λ1,λ2, and μas state variables and
τin (27) as the output, which is expressed as follows in
summary.
State equations
/epsilon1˙λ1=−/Lambda1−1
2λ1−A1/Lambda1−1
1AT
1λ1−A1/Lambda1−1
1AT
2λ2
−/Lambda1−1
2BTμ (33a)
/epsilon1˙λ2=−A2/Lambda1−1AT
1λ1−A2/Lambda1−1AT
2λ2+α (33b)
/epsilon1˙μ=−μ+/parenleftBig
−B/Lambda1−1
2λ1+μ−B/Lambda1−1
2BTμ−b/parenrightBig+
.(33c)
Fig. 2. Two layer neural network architecture.
Output equation
τ=A1/Lambda1−1
1AT
1λ1+A1/Lambda1−1
1AT
2λ2. (33d)
About the proposed neural network model ( 33)f o rt h e
kinematic redundancy resolution problem ( 23) of parallel
manipulator, we have the following remark.
Remark 1: Fig. 2shows the architecture of the proposed
model, for the situation with m=3,k=4(mis the dimension
ofα,kis the number of rows of matrix B). From this ﬁgure,
it is clear that this neural network ( 33) is organized in a two-
layer architecture. The ﬁrst layer(feedback layer), which is
composed of 6 +m+kneurons, is a nonlinear layer with
dynamic feedback. This layer of neurons is associated with thestate variables λ
1∈R6,λ2∈Rm, andμ∈Rk, and get input
from the input variable α. It follows ( 33a), (33b), and ( 33c)f o r
dynamic updates. The second layer (output layer) is a staticlayer with linear mapping as described by ( 33d). It consists of
six neurons and maps the state variables to the output, which
is the platform leg speed τ.
In comparison with various feed-forward neural network
models, such backpropagation neural network, radial basis
function neural network, extreme learning machine, the neu-ral network investigated in this paper falls into the cate-
gory of recurrent neural networks with dynamic feedbacks.
Different from the Kennedy–Chua network , which rep-
resent constraints as a extra penalty, the neural network
model of this paper consider the problem in its dual space
and is able to reach optimal solution. The general purposeprojected neural network  only has a dynamic layer,
while the neural network employed in this paper is orga-
nized in a two-layer structure, where the ﬁrst layer is a
dynamic layer with self-feedback, and the second layer is
a static one. Projected neural networks are widely used tosolve kinematic control of redundant serial manipulators. The
dynamic neural network employed in  to solve kinematic
redundancy in robot motion control also has a two-layeredarchitecture. However, in that model, the hidden layer nodes
has an all-to-all connection, while the hidden nodes are
partitioned into three cliques in the neural model used in
this paper, where neurons in each clique are connected in
an all-to-all manner but the connections between differentcliques are local (e.g., the clique associated with the state
variable μis not connected with that associated with the
state variable λ
2). The property of the local connectivity
between hidden cliques also distinguish this model from
other ones using dynamic neural networks for manipulator
control , , .
VI. T HEORETICAL RESULTS
In this section, we present theoretical results on the pro-
posed neural networks for solving the redundancy resolution
problem of parallel manipulators.
A. Optimality
In this part, we show the equilibrium point of the dynamic
neural networks ( 33) ensures that the corresponding output
τgiven by ( 33d) is identical to the optimal solution of
the problem ( 23). On this point, we have the following
theorem.
Theorem 1: Suppose (λ∗
1,λ∗2,μ∗)is the equilibrium point
of the dynamic neural network ( 33). Then the corresponding
output τ∗obtained from the output equation ( 33d) is optimal
to the constrained programming problem ( 23).
Proof: Letting the right-hand sides of the state equa-
tions ( 33a), (33b), and ( 33c) equal to zero, we ﬁnd
the following conditions about the equilibrium point
(λ∗
1,λ∗2,μ∗):
−/Lambda1−1
2λ∗
1−A1/Lambda1−1
1AT
1λ∗1−A1/Lambda1−1
1AT
2λ∗2−/Lambda1−1
2BTμ∗=0
(34)
−A2/Lambda1−1AT
1λ∗1−A2/Lambda1−1AT
2λ∗2+α=0 (35)
−μ∗+/parenleftBig
−B/Lambda1−1
2λ∗
1+μ∗−B/Lambda1−1
2BTμ∗−b/parenrightBig+
=0 (36)
and the corresponding output is
τ∗=A1/Lambda1−1
1AT
1λ∗1+A1/Lambda1−1
1AT
2λ∗2. (37)
Deﬁne an auxiliary value
˙π∗=/Lambda1−1AT
1λ∗1+/Lambda1−1AT
2λ∗2. (38)
To show that τ∗is optimal to ( 23), we only need to show
that (λ∗
1,λ∗
2,μ∗,τ∗,˙π∗) satisfy the KKT condition ( 24)o f
the optimization problem ( 23), or equivalently the equation
set composed of ( 26)–(28), (30), and ( 31) according to the
analysis in Section V-A, we can conclude that the equation
set composed of ( 26)–(28), (30), and ( 31) is equivalent to
the KKT condition ( 24). Comparing the equation set com-
posed of ( 34)–(38), and the one composed of ( 26)–(28), (30),and ( 31), we ﬁnd that they are identical and therefore are
equivalent. The above procedure implies that the solution
(λ∗
1,λ∗
2,μ∗,τ∗,˙π∗) is optimal to ( 23). Therefore, we conclude
thatτ∗is optimal to the problem ( 23).
B. Stability
In this part, we present theoretical results on the stability of
the proposed dynamic neural network model. In Section VI-A ,
we have concluded that the equilibrium point of the neural
network ( 33) is optimal solution of ( 23). Generally speak-
ing, a dynamic system may not converge to its equilibrium
points. It may happen for a dynamic system to evolve toward
divergence, oscillation, or even chaos. It is necessary forthe proposed neural network to converge for effective com-
putation purpose. Before presenting the convergence results,
we ﬁrst present a lemma about a general projected dynamicsystem as
˙u=−u+P
/Omega1(u−F(u)) (39)
where μ∈Rl,/Omega1is a closed convex set of Rl,P/Omega1(·)is the
projection operator onto the set /Omega1.
Lemma 1 :If∇F(u)is symmetric and positive semi-
deﬁnite in Rl, then the dynamic system ( 39) is stable in the
sense of Lyapnov and is globally convergent to its equilibrium.
The above lemma gives a general convergence results on
dynamic systems with the presence of projection operators.
In our system, the operator (·)+is also a projection opera-
tor, which projects input values to non-negative ones. With
Lemma 1, it is provable for the following stability results on
the proposed model ( 33).
Theorem 2: The dynamic neural network ( 33) is stable in
the sense of Lyapunov and is globally convergent to the
optimal solution of ( 23).
Proof: As we have proved that the output τassociated
with the equilibrium points is optimal to problem ( 23)i n
Theorem 1, to draw the conclusion in this theorem we only
need to show the convergence of ( 33) to its equilibrium points.
To leverage the results presented in Lemma ( 1), we ﬁrst con-
vert ( 33)i n t oas i m i l a rf o r ma s( 39). Deﬁne a vector function
F=[FT
1,FT
2,FT
3]T, with F1–F3deﬁned as follows:
F1=/Lambda1−1
2λ1+A1/Lambda1−1
1AT
1λ1+A1/Lambda1−1
1AT
2λ2+/Lambda1−1
2BTμ
F2=A2/Lambda1−1
1AT
1λ1+A2/Lambda1−1AT
2λ2−α
F3=B/Lambda1−1
2λ1+B/Lambda1−1
2BTμ+b (40)
and deﬁne a set /Omega1as
/Omega1=/braceleftBig
(λ1,λ2,μ),λ 1∈R6,λ2∈Rm,μ∈Rk,μ≥0/bracerightBig
(41)
(a) (b)
Fig. 3. Tracking of a circular motion. (a) Trajectory of the end-effector. (b) Time history of the position tracking error.
(a)(b)
(c) (d)
Fig. 4. Time evolution of the Stewart platform state variables in the case of circular motion tracking. (a) Orientation of the platform θ. (b) Position of the
end-effector p. (c) Control action τ. (d) Leg length r.
where μ≥0 is deﬁned in the piece-wise sense. We also deﬁne
a new variable
x=/bracketleftbig
λT
1λT2μT/bracketrightbigT. (42)
With the above deﬁnitions of F,/Omega1, and x, the proposed neural
network ( 33) can be converted as
/epsilon1˙x=−x+P/Omega1(x−F(x)). (43)
Deﬁne a new time scale φ=t//epsilon1. With the new time scale,
/epsilon1˙x=/epsilon1(dx/dt)=dx/dφ, and the neural dynamic ( 43)
converts to
dx
dφ=−x+P/Omega1(x−F(x)) (44)
which are in the nominal form of the projected dynamic
systems. To prove the convergence, we show the symmetricityof∇Fin (40) and its positive semi-deﬁniteness
∇F=⎡
⎣/Lambda1−1
2+A1/Lambda1−1
1AT
1A1/Lambda1−1
1AT
2/Lambda1−1
2BT
A2/Lambda1−1
1AT
1A2/Lambda1−1
1AT
20
B/Lambda1−1
20 B/Lambda1−1
2BT⎤
⎦.(45)
Clearly, ∇Fis symmetric. As to the positive semi-deﬁniteness,
we decompose ∇Fin (45) into the following form:
∇F=⎡
⎣A1/Lambda1−1
1AT
1A1/Lambda1−1
1AT
20
A2/Lambda1−1
1AT
1A2/Lambda1−1
1AT
20
00 0⎤
⎦
+⎡
⎣/Lambda1−1
20/Lambda1−1
2BT
00 0
B/Lambda1−1
20B/Lambda1−1
2BT⎤
⎦
=⎡
⎢⎣A1/Lambda1−1
2
1
A2/Lambda1−1
2
1
0⎤
⎥⎦⎡
⎢⎣A1/Lambda1−1
2
1
A2/Lambda1−1
2
1
0⎤
⎥⎦T
+⎡
⎢⎣/Lambda1−1
2
2
0
B2/Lambda1−1
2
2⎤
⎥⎦⎡
⎢⎣/Lambda1−1
2
2
0
B2/Lambda1−1
2
2⎤
⎥⎦.(46)
(a)
(b)
(c)
Fig. 5. Time evolution of the neural network state variables in the
case of circular motion tracking. Neural network state variables (a) λ1,
(b)λ2,a n d( c ) μ.
The above expression implies that ∇Fis indeed positive semi-
deﬁnite. In summary, as ∇Fdeﬁned in this proof is symmetric
and positive semi-deﬁnite, the dynamic system ( 44), i.e., the
proposed neural network ( 33) is stable and is convergent to
the optimal solution of ( 24) according to Lemma 1.
C. Comparison With Other Control Schemes
In this part, we compare the proposed method with some
existing control schemes for parallel robotic platform.
In , feed-forward neural network-based approaches,
including multilayer perception neural network and radial
basis functions neural network, were employed to learn thenonlinear mapping of the robot in its forward kinematics.
Thanks to the nonlinear approximation power of feed-forward
neural networks, the static mapping error can be minimized by
feeding enough training data to the model. However, to deter-
mine the values on the weights of neural networks, an off-linetraining procedure is necessary before the use of the method.
Additionally, due to the lack of consideration for speed limits
of each actuator, such constraint may not be satisﬁed in realapplication. Moreover, due to the existence of remaining train-
workspace. Due to the required training procedure, and the
strong dependence of the performance on training data, thismethod also inevitably bears similar limitations as , such
as no compliance to speed limitations, nonoptimality in kine-
matics. Differently, Chen and Fu  considered the kinematic
model into the design and used sliding mode method for the
tracking control of the Stewart platform. In comparison with
methods presented in  and , this method is inherently
an online control scheme, does not require any pretraining,
and enjoys a high control precision. However, without con-
sidering speed constraints, it still lacks compliance to such a
physical restriction in speed. In , a fuzzy controller was
designed for the online intelligent control of Stewart plat-forms. This controller is able to reach high-precision tracking
of signals in the workspace, but may suffer from similar lim-
itations as the sliding mode-based approach . In contrast,
since the method presented in this paper directly consider
the problem as an optimization problem, it reaches the opti-
mal solution accordingly. Further, since the speed constraintsare taken into account as inequality constraints in the prob-
lem formulation, compliance to constraints are thus achieved.
The comparisons of different methods for kinematic con-trol of Stewart platforms are summarized in Table I,f r o m
which it is clear to observe the advantage of the dynamic
neural network-based approach for the control of Stewartplatforms.
VII. N
UMERICAL INVESTIGATION
To validate the effectiveness of the proposed approach,
in this section, we apply the neural network model to theredundancy resolution of a physically constrained Stewart
platform.
A. Simulation Setups
In the simulation, we consider a Stewart platform with
the leg connectors on the mobile platform locating around
a circle with radius 1 .0ma t b
/prime
1=,
b/prime
2=,b/prime
3=,
b/prime
4=,b/prime
5=, and
b/prime
6= in the platform coordinate, and
the leg connectors locating around a circle with radius 0 .75 m
ata1=,a2=,
a3=,a4=,a5=
,a6= on the ﬁxed
base. For simplicity, the end-effector is put at the origin of the
platform coordinate (this can always be achieved by deﬁning
the platform coordinate with its origin at the end-effector posi-
tion). In the situation for position tracking in 3-D space, thetotal redundancy is 3 as the input dimension is 6 while the
output dimension is 3.
In the simulation, we use the tracking error, deﬁned as the
difference between the desired position and the real position
at time t, to measure the tracking performance in the circular
(b) (a)
Fig. 6. Tracking of an inﬁnity-sign motion. (a) Trajectory of the end-effector. (b) Time history of the position tracking error.
(a)
(c)(b)
(d)
Fig. 7. Time evolution of the Stewart platform state variables in the case of inﬁnity-sign motion tracking. (a) Orientation of the platform θ. (b) Position of
the end-effector p. (c) Control action τ. (d) Leg length r.
motion tracking, inﬁnity-sign curve tracking, and the square
motion tracking situation.
B. Circular Trajectory
In this part, we consider the tracking of a smooth cir-
cular path using the proposed method. The desired motionof the end-effector is to follow a circular trajectory at the
speed of 2 m/s. The desired circle trajectory is centered at
 with an radius of 0 .08 m, and has a revo-
lute angle around the x-axis for 45 degrees. In the simulation,
we simply choose /Lambda1
1and/Lambda12as an identity matrix. The
value of the matrix A1is computed in real time accordingto (19). The matrix A2is chosen as A2= such
that the position tracking requirements can be achieved. In
practice, the actuation speed of each leg is limited withina range due to the physical constraints of the actuators.
To capture this property, we impose the constraint that the
speed tau is no greater than η> 0 in its absolute value,
i.e.,|τ
i|≤ηfori=1,2,..., 6, which is equivalent to
−η≤τi≤η. Organizing to a matrix form yields an inequal-
ity in the form of ( 23d) with B=T,b=η112
with 112representing a twelve-dimensional vector with all
entries equal one. In the simulation, we set the speed boundη=0.25 m/s. The scaling factor /epsilon1is chosen as /epsilon1=0.01.
(a)
(b)
(c)
Fig. 8. Time evolution of the neural network state variables in the case of
inﬁnity-sign motion tracking. Neural network state variables (a) λ1,( b )λ2,
and (c) μ.
The tracking results are shown in Fig. 3by running the simula-
tion for 2 s. As shown in Fig. 3(a), the end-effector successful
tracks the circular path with a small tracking error [as shown
in Fig. 3(b), where e(1),e(2), and e(3)denote the components
of the position tracking error e, respectively, along the x,y, and
zaxes of the base frame, the errors are less than 0 .015 m in
amplitude]. The circular-path following experiments demon-strated the capability of the proposed dual neural network for
online resolving of kinematic redundancy of physically con-
strained manipulators. Considering the input motion for the six
legs, Fig. 4shows the time proﬁle of the Stewart platform state
variables, i.e., the three Euler orientations of the mobile plat-form , the end-effector position , the speed
of each leg  and the length of each leg .
The attached moving frame to the upper platform is exactly inthe middle and the p(1)andp(2)coordinates started from zero
and the p(3)oscillates between almost 0.005 and −again. From Fig. 4(a), it is observed that there is a small
drift from the neutral position. Although the presence of this
drifting in orientation, the desired motion, which is given in
terms of end-effector positions, are still achived as shown inFig. 3. This in turn validates the robustness of the proposed
scheme in the presence of orientation drifting. The red dashed
line in Fig. 4(c) depicts the bound ±0.25 (η=0.
25), which
is the bound for the action speed. It can be observed that
τconverges to the region  very fast and stays
approximately inside this region through the runtime, except
some short period  due
to the dynamics of the desired motion. The neural networkstate variable are plotted in Fig. 5. From this ﬁgure, we can
clearly observer the dynamic evolution of the neural activities.
It is noteworthy that the neural activities do not converge to aconstant value. Instead, they varies with time as they are uti-
lized to compensate and regulate the dynamic motion of the
robot.
C. Inﬁnity-Sign Trajectory
In this part, we consider the tracking of an inﬁnity-sign
curve using the presented method. Speciﬁcally, we consider
the tracking at a constant speed 1 m/s. The desired trajectoryis obtained by rotating a planar inﬁnity-sign curve analyti-
cally expressed as x
4=a2(x2−y2)with a=0.15 m around
thex-axis for 45 degrees. The center of this curve locates
at . The parameters, /Lambda11,/Lambda12,A1,A2,η,
B,b,/epsilon1are chosen the same value as in the circular tra-
jectory tracking situation. Simulation results are obtained by
running it for 2 s. As shown in Fig. 6, the end-effector suc-
cessful tracks the desired path with a small tracking error.Fig. 7shows the time proﬁle of the Stewart platform state
variables, including the 3 Euler orientations of the mobile
platform , the end-effector position ,
the speed of each leg  and the length of each
leg . The neural network state variable are plot-
ted in Fig. 8. Due to the dynamic changing of the neural
states, the nonlinearity in the Stewart platform is successfully
compensated and an accurate tracking performance is thus
achieved.
D. Square Trajectory
In this section, we investigate the square trajectory track-
ing using the proposed approach. Different from the case of
smooth circular motion tracking, the desired square path is
nonsmooth at the four corners and poses challenges to the
controller on its real-time performance. In the simulation, thedesired motion of the end effector is to follow a square tra-
jectory, which is centered at  with the edge
length of 0 .08 m, at the desired speed 1 .0 m/s. The square has
a revolute angle around the x-axis for 60 degrees. We choose
the parameters /Lambda1
1and/Lambda12,A2andBthe same values as in
(b) (a)
Fig. 9. Tracking of a square motion. (a) Trajectory of the end-effector. (b) Time history of the position tracking error.
(a)
(c)(b)
(d)
Fig. 10. Time evolution of the Stewart platform state variables in the case of square motion tracking. (a) Orientation of the platform θ. (b) Position of the
end-effector p. (c) Control action τ. (d) Leg length r.
the situation for circular motion for simplicity. The parame-
terA1is computed in real time according to ( 19). The speed
limit bound ηis chosen as η=0.6 m/s, and bis accordingly
chosen as b=0.6112with 112. The scaling factor /epsilon1is cho-
sen as /epsilon1=0.001. The tracking results are shown in Fig. 9
by running the simulation for 2 s. As shown in Fig. 9(a), the
end-effector successful tracks the square motion with a small
tracking error [as shown in Fig. 9(b), where e(1),e(2), and
e(3)denote the components of the position tracking error e,
respectively, along the x,y, and zaxes of the base frame, the
errors are less than 0 .006 m in amplitude]. Remarkably that the
error curves have jerks at time t=0.3,0.6,0.9,1.2,1.5,1.8s ,
which is a result of the velocity switching from one direc-
tion to another one around the corner of the square. Despectof the existence of the jerks, due to the nonlinear feedback
mechanism in the neural network, the errors reduces swiftlyto a very low value [much lower than 0 .001 m as shown
in Fig. 3(b) after the jerk]. The above observation in turn
validates the effectiveness of the proposed neural scheme in
dealing with nonsmooth tracking problem. The real-time val-
ues on the Stewart platform states are shown in Fig. 10. Similar
to the situation for circle tracking, the presence of drifting in
orientations, as observed in Fig. 10(a), does not affect the
tracking performance. The end-effector position evolves with-out drifting , and remains a very small error from
its desired trajectory . Fig. 3(c) shows the time pro-
ﬁle of the control action, which is the speed of each leg.It is clear that the control action is approximately regulated
inside the range [ −0.
6,0.6], which in turn validates the effect
of the proposed solution in fulﬁlling the inequality regula-tion. The dynamic evolution of the neural activities are shown
in Fig. 11.
(a)
(b)
(c)
Fig. 11. Time evolution of the neural network state variables in the
case of square motion tracking. Neural network state variables (a) λ1,
(b)λ2,a n d( c ) μ.
VIII. C ONCLUSION
In this paper, a dynamic neural network is designed to solve
the redundancy resolution problem of Stewart platforms. Thephysical constraints and optimization criteria are rigorously
modeled as a constrained quadratic programming problem.
To solve this problem in real time, a recurrent neural net-work is proposed to reach the equality constraints, inequality
constraints, and optimality criteria simultaneously. Rigorous
theoretical proof are supplied to verify the convergence of theproposed model. Simulation results validate the effectiveness
of the proposed solution.
R
EFERENCES
 S. Liu, W. Li, Y . Du, and L. Fang, “Forward kinematics of the Stewart
platform using hybrid immune genetic algorithm,” in Proc. IEEE Int.
Conf. Mechatronics Autom. , Luoyang, China, Jun. 2006, pp. 2330–2335.
 O. Masory and W. Jian, “Workspace evaluation of Stewart platforms,”
Adv. Robot. , vol. 9, no. 4, pp. 443–461, 1994.
 Q. Liu, Q. He, and Z. Shi, “Extreme support vector machine classiﬁer,”
inAdvances in Knowledge Discovery and Data Mining (LCNS 5012),
T. Washio, E. Suzuki, K. Ting, and A. Inokuchi, Eds. Berlin, Germany:
Springer, 2008, pp. 222–233. Y . Nakamura and H. Hanafusam, “Inverse kinematics solutions with
singularity robustness for robot manipulator control,” J. Dyn. Syst. Meas.
Control , vol. 108, no. 3, pp. 163–171, 1986.
 G. Thomas and M. John, “Inverse dynamic analysis of parallel manip-
ulators with full mobility,” Mech. Mach. Theory , vol. 38, no. 6,
pp. 549–562, 2003.
 A. Yorukoglu and E. Altug, “Estimation of unbalanced loads in
washing machines using fuzzy neural networks,” IEEE/ASME Trans.
Mechatronics , vol. 18, no. 3, pp. 1182–1190, Jun. 2013.
 N. Nikdel, P. Nikdel, M. A. Badamchizadeh, and I. Hassanzadeh, “Using
neural network model predictive control for controlling shape memoryalloy-based manipulator,” IEEE Trans. Ind. Electron. , vol. 61, no. 3,
pp. 1394–1401, Mar. 2014.
 Y . Zhang, B. Mu, and H. Zheng, “Link between and comparison and
combination of Zhang neural network and quasi-Newton BFGS method
for time-varying quadratic minimization,” IEEE Trans. Cybern. , vol. 43,
no. 2, pp. 490–503, Apr. 2013.
 Y . Xia, T. Chen, and J. Shan, “A novel iterative method for comput-
ing generalized inverse,” Neural Comput. , vol. 26, no. 2, pp. 449–465,
Feb. 2014.
 L. Xiao and Y . Zhang, “A new performance index for the repetitive
motion of mobile manipulators,” IEEE Trans. Cybern. , vol. 44, no. 2,
pp. 280–292, Feb. 2014.
 S. Li, Z. You, H. Guo, X. Luo, and Z. Zhao, “Inverse-free extreme learn-
ing machine with optimal information updating,” IEEE Trans. Cybern. ,
DOI: 10.1109/TCYB.2015.2434841.
 L. Jin and Y . Zhang, “G2-type SRMPC scheme for synchronous manip-
ulation of two redundant robot arms,” IEEE Trans. Cybern. , vol. 45,
no. 2, pp. 153–164, Feb. 2015.
 M. Jose, V . Santiba, R. Soto, and M. A. Llama, “Fuzzy self-tuning PID
semiglobal regulator for robot manipulators,” IEEE Trans. Ind. Electron. ,
vol. 59, no. 6, pp. 2709–2717, Jun. 2012.
 S. Nasri, F. Piltan, S. Haghighi, I. Nazari, and S. Siamak, “Artiﬁcial
control of puma robot manipulator: A-review of fuzzy inference engineand application to classical controller,” Int. J. Robot. Autom. ,v o l .2 ,
no. 5, pp. 406–429, 2011.
 R. Köker, “A genetic algorithm approach to a neural-network-based
inverse kinematics solution of robotic manipulators based on error
minimization,” Inf. Sci. , vol. 222, pp. 528–543, Feb. 2013.
 H. Vicente, H. Ayala, and D. S. Coelho, “Tuning of PID controller based
on a multiobjective genetic algorithm applied to a robotic manipulator,”Expert Syst. Appl. , vol. 39, no. 10, pp. 8968–8974, 2012.
 Z. P. Wang, T. Zhou, Y . Mao, and Q. J. Chen, “Adaptive recurrent
neural network control of uncertain constrained nonholonomic mobile
manipulators,” Int. J. Syst. Sci. , vol. 45, no. 2, pp. 133–144, 2014.
 Y . Zhang, S. S. Ge, and T. Lee, “A uniﬁed quadratic-programming-based
dynamical system approach to joint torque optimization of physi-
cally constrained redundant manipulators,” IEEE Trans. Syst., Man,
C y b e r n .B ,C y b e r n . , vol. 34, no. 5, pp. 2126–2132, Oct. 2004.
 Y . Zhang, W. Jun, and Y . Xia, “A dual neural network for redundancy
resolution of kinematically redundant manipulators subject to joint limits
and joint velocity limits,” IEEE Trans. Neural Netw. , vol. 14, no. 3,
pp. 658–667, May 2003.
 Y . Xia and W. Jun, “A dual neural network for kinematic control of
redundant robot manipulators,” IEEE Trans. Syst., Man, Cybern. B,
Cybern. , vol. 31, no. 1, pp. 147–154, Feb. 2001.
 S. Li, S. Chen, B. Liu, Y . Li, and Y . Liang, “Decentralized kinematic
control of a class of collaborative redundant manipulators via recurrent
neural networks,” Neurocomputing , vol. 91, pp. 1–10, Aug. 2012.
 S. Li, H. Cui, and Y . Li, “Decentralized control of collaborative redun-
dant manipulators with partial command coverage via locally connected
recurrent neural networks,” Neural Comput. Appl. , vol. 23, nos. 3–4,
pp. 1051–1060, 2013.
 S. Liu and J. Wang, “A simpliﬁed dual neural network for quadratic
programming with its KWTA application,” IEEE Trans. Neural Netw. ,
vol. 17, no. 6, pp. 1500–1510, Nov. 2006.
 Z. Guo, J. Wang, and Z. Yan, “Global exponential dissipativity and
stabilization of memristor-based recurrent neural networks with time-
varying delays,” Neural Netw. , vol. 48, pp. 158–172, Dec. 2013.
 C. Zheng and J. Cao, “Robust synchronization of coupled neural net-
works with mixed delays and uncertain parameters by intermittentpinning control,” Neurocomputing , vol. 141, pp. 153–159, Oct. 2014.
 H. Zhang, Z. Wang, and D. Liu, “A comprehensive review of stabil-
ity analysis of continuous-time recurrent neural networks,” IEEE Trans.
Neural Netw. Learn. Syst. , vol. 25, no. 7, pp. 1229–1262, Jul. 2014. S. Zhang, Y . Xia, and W. Zheng, “A complex-valued neural dynamical
optimization approach and its stability analysis,” Neural Netw. , vol. 61,
pp. 59–67, Jan. 2015.
 Y . Xia and H. Leung, “A fast learning algorithm for blind data fusion
using a novel L_2-norm estimation,” IEEE Sensors J. , vol. 14, no. 3,
pp. 666–672, Mar. 2014.
 Y . Xia, C. Sun, and W. Zheng, “Discrete-time neural network for fast
solving large linear L1estimation problems and its application to image
restoration,” IEEE Trans. Neural Netw. Learn. Syst. , vol. 23, no. 5,
pp. 812–820, May 2012.
 E. D. Sontag, Mathematical Control Theory: Deterministic Finite
Dimensional Systems , vol. 6. New York, NY , USA: Springer, 1998.
 S. Boyd and L. Vandenberghe, Convex Optimization .N e wY o r k ,N Y ,
USA: Cambridge Univ. Press, Mar. 2004.
 M. P. Kennedy and L. O. Chua, “Neural networks for nonlinear pro-
gramming,” IEEE Trans. Circuits Syst. , vol. 35, no. 5, pp. 554–562,
May 1988.
 Y . S. Xia, “Further results on global convergence and stability of globally
projected dynamical systems,” J. Optim. Theory Appl. , vol. 122, no. 3,
pp. 627–649, 2004.
 Y . Xia, G. Feng, and J. Wang, “A primal-dual neural network for online
resolving constrained kinematic redundancy in robot motion control,”IEEE Trans. Syst., Man, Cybern. B, Cybern. , vol. 35, no. 1, pp. 54–64,
Feb. 2005.
 D. Zhang and J. Lei, “Kinematic analysis of a novel 3-DOF actuation
redundant parallel manipulator using artiﬁcial intelligence approach,”Robot. Comput.-Integr. Manuf. , vol. 27, no. 1, pp. 157–163, 2011.
 S. Assal, “Self-organizing approach for learning the forward kinematic
multiple solutions of parallel manipulators,” Robotica , vol. 30, no. 6,
pp. 951–961, 2012.
 S. Chen and L. Fu, “Output feedback sliding mode control for a Stewart
platform with a nonlinear observer-based forward kinematics solu-tion,” IEEE Trans. Control Syst. Technol. , vol. 21, no. 1, pp. 176–185,
Jan. 2013.
 G. Liu, Z. Qu, X. Liu, and J. Han, “Tracking performance improve-
ments of an electrohydraulic Gough–Stewart platform using a fuzzyincremental controller,” Ind. Robot Int. J. , vol. 41, no. 2, pp. 225–235,
2014.
 was born in Hyderabad,
India. He received the B.E. degree in informationtechnology from Osmania University, Hyderabad, in2007, the M.S. degree in research of very-large-
scale integration and embedded systems from the
International Institute of Information Technology,Hyderabad, in 2009, and the M.S. degree in electri-cal engineering from the King Abdullah University
of Science and Technology, Thuwal, Saudi Arabia.
He is currently a Doctorate Research Scholar with
Hong Kong Polytechnic University, Hong Kong. His
current research interests includes routing in wireless sensor networks, perfor-
mance evaluation of neural networks, Ashton Raggatt McDougall developmentfor multiple-input and multiple-output systems, particle swarm optimization,and pattern recognition.
Shuai Li (M’14) received the B.E. degree in
precision mechanical engineering from the HefeiUniversity of Technology, Hefei, China, in 2005,the M.E. degree in automatic control engineering
from the University of Science and Technology of
China, Hefei, in 2008, and the Ph.D. in electricaland computer engineering from the Stevens Institute
of Technology, Hoboken, NJ, USA, in 2014.
He is a Research Assistant Professor with
Hong Kong Polytechnic University, Hong Kong. Hiscurrent research interests include distributed estima-
tion, optimization and control of networked systems, kinematic and dynamic
analysis of robotic systems, and neural networks.
Dr. Li is currently on the editorial board of the Neural Computing and
Applications and the International Journal of Distributed Sensor Networks .